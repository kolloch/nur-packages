language: nix
nix: 2.3.4

sudo: false

env:
  global:
    - CACHIX_CACHE=eigenvalue
    - NUR_REPO=kolloch

matrix:
  include:
    - env: NIX_CHANNEL=https://nixos.org/channels/nixpkgs-unstable
    - env: NIX_CHANNEL=https://nixos.org/channels/nixos-unstable
    - env: NIX_CHANNEL=https://nixos.org/channels/nixos-20.03

install:
 - nix --version
 - if [ -n "${CACHIX_CACHE}" ]; then travis_retry nix-channel --update; fi
 - if [ -n "${CACHIX_CACHE}" ]; then nix-env -iA cachix -f https://cachix.org/api/v1/install; fi
 - if [ -n "${CACHIX_CACHE}" ]; then cachix use "${CACHIX_CACHE}"; fi
 - nix-channel --add "${NIX_CHANNEL}" nixpkgs
 - travis_retry nix-channel --update

script:
 - echo "=== \e[1mEvaluating lib\e[0m"
   nix eval -f default.nix 'lib'
 - echo "=== \e[1mEvaluating modules\e[0m"
   nix eval -f default.nix 'modules'
 - echo "=== \e[1mEvaluating overlay\e[0m"
   nix eval -f default.nix 'overlays'
 - echo -e "=== \e[1mBuilding ci.nix buildOutputs\e[0m"
   nix-build ci.nix -A buildOutputs

after_success:
  - if [ -n "${CACHIX_CACHE}" ]; then
      echo "=== \e[1mPushing artifacts to cachix\e[0m"
      nix-build ci.nix -A cacheOutputs | cachix push "${CACHIX_CACHE}"
      fi
  - if [ "cron" != "${TRAVIS_EVENT_TYPE}" -a "false" = "${TRAVIS_PULL_REQUEST}" -a "master" = "${TRAVIS_BRANCH}" ]; then
      echo "=== \e[1mTriggering NUR update\e[0m"
      curl -XPOST "https://nur-update.herokuapp.com/update?repo=${NUR_REPO}"
      fi
